[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_map = '<Leader>P'
hook_source = '''
  nnoremap <silent> <Leader>P :<C-u>Deol -command='fish' -split='horizontal'<CR>
  tnoremap <ESC> <C-\><C-n>
'''

[[plugins]]
repo = 'haya14busa/is.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'alvan/vim-closetag'
on_event = 'InsertEnter'
hook_source = '''
  let g:closetag_filetypes = 'html,jinja'
'''

# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'npm install'
# on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
# hook_source = '''
#   " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
#   let g:prettier#autoformat = 0

#   " Prettierのパースエラーをquickfixに表示しない
#   let g:prettier#quickfix_enabled = 0

#   autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
# '''

[[plugins]]
repo = 'dense-analysis/ale'
on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
hook_add = '''
  autocmd VimEnter,Colorscheme * :hi ALEErrorSign cterm=bold ctermfg=1 ctermbg=234
  autocmd VimEnter,Colorscheme * :hi ALEWarningSign cterm=bold ctermfg=11 ctermbg=234
  autocmd VimEnter,Colorscheme * :hi ALEError cterm=NONE ctermfg=0 ctermbg=1
  autocmd VimEnter,Colorscheme * :hi ALEWarning cterm=NONE ctermfg=0 ctermbg=11
'''
hook_source = '''
  let g:ale_linters = {
    \ 'css': ['stylelint'],
    \ 'scss': ['stylelint'],
  \ }
  let g:ale_fixers = {
    \ 'css': ['stylelint'],
    \ 'scss': ['stylelint'],
  \ }
  let g:ale_lint_on_text_changed = 1
  let g:ale_lint_on_save = 1
  let g:ale_fix_on_save = 0
  
  " let g:ale_css_stylelint_executable = 'stylelint'
  " let g:ale_css_stylelint_options = '--fix'
  " let g:ale_scss_stylelint_executable = 'stylelint'
  " let g:ale_scss_stylelint_options = '--fix'
  let g:ale_scss_stylelint_use_global = 0
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
on_source = ['ale']
hook_add = '''
  let g:lightline.component_expand = {
    \ 'linter_checking': 'lightline#ale#checking',
    \ 'linter_warnings': 'lightline#ale#warnings',
    \ 'linter_errors': 'lightline#ale#errors',
    \ 'linter_ok': 'lightline#ale#ok',
  \ }
  let g:lightline.component_type = {
    \ 'linter_checking': 'left',
    \ 'linter_warnings': 'warning',
    \ 'linter_errors': 'error',
    \ 'linter_ok': 'left',
  \ }
  let g:lightline#ale#indicator_checking = "Linting..."
  let g:lightline#ale#indicator_warnings = "\uf071 Warning: "
  let g:lightline#ale#indicator_errors = "\uf05e Error: "
  let g:lightline#ale#indicator_ok = "\uf00c OK"
'''

# [[plugins]]
# repo = 'neomake/neomake'
# on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
# hook_source = '''
#   let g:neomake_scss_enabled_makers = ['stylelint']
#   let g:neomake_scss_stylelint_maker = {
#     \ 'exe': 'stylelint',
#     \ 'args': ['--fix'],
#   \ }
# '''

# [[plugins]]
# repo = 'sbdchd/neoformat'
# on_cmd = 'Neoformat'
# hook_source = '''
#   let g:neoformat_enabled_scss = ['stylelint']
#   let g:neoformat_scss_stylelint = {
#     \ 'exe': 'stylelint',
#     \ 'args': ['--fix', '--stdin-filename', '"%:t"'],
#     \ 'stdin': 1,
#   \ }
# '''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet.vim', 'context_filetype.vim']
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1

  call deoplete#custom#option('omni_patterns', {
    \ 'java': '[^. *\t]\.\w*',
    \  'html': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    \  'xhtml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    \  'xml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
  \})
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:user_emmet_mode = 'iv'
  let g:user_emmet_settings = {
    \ 'variables' : {
    \   'lang' : 'ja'
    \ }
  \ }
  imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertEnter'
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
  let g:neosnippet#scope_aliases = {}
  let g:neosnippet#scope_aliases['jinja'] = 'html,twig'

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'

# [[plugins]]
# repo = 'honza/vim-snippets'
# on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  if !exists('g:context_filetype#same_filetypes')
    let g:context_filetype#same_filetypes = {}
  endif
  let g:context_filetype#same_filetypes.html = 'pcss'
'''

[[plugins]]
repo = 'uplus/vim-clurin'
on_event = 'VimEnter'
hook_source = '''
  nnoremap <silent> <C-a> :<C-u>ClurinNext<CR>
  nnoremap <silent> <C-x> :<C-u>ClurinPrev<CR>
  vnoremap <silent> <C-a> :call clurin#pa(+v:count1, 1)<CR>
  vnoremap <silent> <C-x> :call clurin#pa(-v:count1, 1)<CR>

  function! g:CountUp(strs, cnt, def) abort
    " a:strs: matched text list
    " a:cnt: non zero.
    " a:def: definition
    return str2nr(a:strs[0]) + a:cnt
  endfunction

  function! g:CtrlAX(cnt) abort
    if a:cnt >= 0
      execute 'normal!' a:cnt . "\<C-A>"
    else
      execute 'normal!' (-a:cnt) . "\<C-X>"
    endif
  endfunction

  " for RSpec
  au BufRead *_spec.rb let b:clurin = [
    \ ['be_truthy', 'be_falsey'],
    \ [{'pattern': '\.to_not ', 'replace': '.to '}]
  \ ]

  let g:clurin = {
    \ '-': { 'def': [
    \   [
    \     {'pattern': '\(-\?\d\+\)', 'replace': function('g:CountUp')},
    \   ],
    \   ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    \   ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'],
    \   ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    \   ['月', '火', '水', '木', '金', '土', '日'],
    \   ['臨', '兵', '闘', '者', '皆', '陣', '烈', '在', '前'],
    \   ['true', 'false'],
    \   ['True', 'False'],
    \   ['on', 'off'],
    \   ['On', 'Off'],
    \   ['enable', 'disable'],
    \   ['Enable', 'Disable'],
    \   ['left', 'right'],
    \ ]},
    \ 'vim': {'def': [
    \   [
    \     {'pattern': '\[''\(\k\+\)''\]', 'replace': '[''\1'']'},
    \     {'pattern': '\["\(\k\+\)"\]',   'replace': '["\1"]'},
    \     {'pattern': '\.\(\k\+\)',       'replace': '.\1'},
    \   ],
    \   ['nmap', 'vmap', 'imap'],
    \   ['nnoremap', 'vnoremap', 'inoremap'],
    \ ]},
    \ 'c cpp' : {'def': [
    \   [ '&&', '||' ],
    \   [
    \     {'pattern': '\(\k\+\)\.', 'replace': '\1.'},
    \     {'pattern': '\(\k\+\)->', 'replace': '\1->'},
    \   ]
    \ ], 'nomatch': function('g:CtrlAX')},
  \ }
'''

# [[plugins]]
# repo = 'tpope/vim-speeddating'
# on_event = 'VimEnter'
# hook_source = '''
#   SpeedDatingFormat %m/%d%(%a) " 1/1(月)
# '''

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'VimEnter'

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]]
on_event = 'InsertEnter'
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Valloric/MatchTagAlways'
on_event = 'VimEnter'
hook_add = '''
  let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'html.twig' : 1,
  \ }
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_event = 'VimEnter'
hook_source = '''
  autocmd FileType jinja setlocal commentstring={#\ %s\ #}
  autocmd BufNewFile,BufRead *.pcss setlocal commentstring=/*\ %s\ */
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['css', 'scss', 'html', 'jinja', 'vue', 'markdown']

