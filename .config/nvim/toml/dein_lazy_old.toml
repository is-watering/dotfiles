# [[plugins]]
# repo = 'Shougo/deol.nvim'
# on_map = '<Leader>P'
# hook_source = '''
#   nnoremap <silent> <Leader>P :<C-u>Deol -command='fish' -split='horizontal'<CR>
#   tnoremap <ESC> <C-\><C-n>
# '''

# [[plugins]]
# repo = 'osyo-manga/vim-over'
# on_event = 'VimEnter'
# hook_source = '''
#   nnoremap <silent> ,m :OverCommandLine<CR>
# '''

# [[plugins]]
# repo = 'haya14busa/is.vim'
# on_event = 'VimEnter'

# [[plugins]]
# repo = 'cakebaker/scss-syntax.vim'
# on_event = 'VimEnter'

# [[plugins]]
# repo = 'nvim-treesitter/nvim-treesitter'
# merged = 0
# on_event = 'BufRead'
# hook_post_update = 'TSUpdate'
# hook_source = 'source ~/.config/nvim/plugins/nvim-treesitter.lua'

# [[plugins]]
# repo = 'cespare/vim-toml'
# on_event = 'VimEnter'

# [[plugins]]
# repo = 'nathanaelkane/vim-indent-guides'
# on_event = 'VimEnter'
# hook_add = '''
#   let g:indent_guides_enable_on_vim_startup = 1
#   let g:indent_guides_auto_colors = 0
#   autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=none ctermbg=none
#   autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#121212 ctermbg=233
# '''

# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'npm install'
# on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
# hook_source = '''
#   " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
#   let g:prettier#autoformat = 0

#   " Prettierのパースエラーをquickfixに表示しない
#   let g:prettier#quickfix_enabled = 0

#   autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
# '''

# [[plugins]]
# repo = 'dense-analysis/ale'
# on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
# hook_add = '''
#   autocmd VimEnter,Colorscheme * :hi ALEErrorSign cterm=bold ctermfg=1 ctermbg=234
#   autocmd VimEnter,Colorscheme * :hi ALEWarningSign cterm=bold ctermfg=11 ctermbg=234
#   autocmd VimEnter,Colorscheme * :hi ALEError cterm=NONE ctermfg=0 ctermbg=1
#   autocmd VimEnter,Colorscheme * :hi ALEWarning cterm=NONE ctermfg=0 ctermbg=11
# '''
# hook_source = '''
#   let g:ale_linters = {
#     \ 'css': ['stylelint'],
#     \ 'scss': ['stylelint'],
#   \ }
#   let g:ale_fixers = {
#     \ 'css': ['stylelint'],
#     \ 'scss': ['stylelint'],
#   \ }
#   let g:ale_lint_on_text_changed = 1
#   let g:ale_lint_on_save = 1
#   let g:ale_fix_on_save = 0

#   " let g:ale_css_stylelint_executable = 'stylelint'
#   " let g:ale_css_stylelint_options = '--fix'
#   " let g:ale_scss_stylelint_executable = 'stylelint'
#   " let g:ale_scss_stylelint_options = '--fix'
#   let g:ale_scss_stylelint_use_global = 0
# '''

# [[plugins]]
# repo = 'maximbaz/lightline-ale'
# depends = ['lightline.vim', 'ale']
# on_source = ['ale']
# hook_add = '''
#   let g:lightline.component_expand = {
#     \ 'linter_checking': 'lightline#ale#checking',
#     \ 'linter_warnings': 'lightline#ale#warnings',
#     \ 'linter_errors': 'lightline#ale#errors',
#     \ 'linter_ok': 'lightline#ale#ok',
#   \ }
#   let g:lightline.component_type = {
#     \ 'linter_checking': 'left',
#     \ 'linter_warnings': 'warning',
#     \ 'linter_errors': 'error',
#     \ 'linter_ok': 'left',
#   \ }
#   let g:lightline#ale#indicator_checking = "Linting..."
#   let g:lightline#ale#indicator_warnings = "\uf071 Warning: "
#   let g:lightline#ale#indicator_errors = "\uf05e Error: "
#   let g:lightline#ale#indicator_ok = "\uf00c OK"
# '''

# [[plugins]]
# repo = 'neomake/neomake'
# on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
# hook_source = '''
#   let g:neomake_scss_enabled_makers = ['stylelint']
#   let g:neomake_scss_stylelint_maker = {
#     \ 'exe': 'stylelint',
#     \ 'args': ['--fix'],
#   \ }
# '''

# [[plugins]]
# repo = 'sbdchd/neoformat'
# on_cmd = 'Neoformat'
# hook_source = '''
#   let g:neoformat_enabled_scss = ['stylelint']
#   let g:neoformat_scss_stylelint = {
#     \ 'exe': 'stylelint',
#     \ 'args': ['--fix', '--stdin-filename', '"%:t"'],
#     \ 'stdin': 1,
#   \ }
# '''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1

#   call deoplete#custom#option({
#     \ 'auto_complete_delay': 0,
#     \ 'min_pattern_length': 2,
#   \})

#   call deoplete#custom#option('omni_patterns', {
#     \ 'java': '[^. *\t]\.\w*',
#     \ 'html': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
#     \ 'xhtml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
#     \ 'xml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
#   \})

#   call deoplete#custom#var('omni', 'functions', {
#   \ 'css,stylus': ['csscomplete#CompleteCSS']
#   \})
# '''

# [[plugins]]
# repo = 'ncm2/float-preview.nvim'
# on_i = 1

# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# on_i = 1

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets']
# on_i  = 1
# on_ft = ['snippet']
# hook_source = '''
#   " Plugin key-mappings.
#   " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
#   imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#   smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k>     <Plug>(neosnippet_expand_target)

#   " SuperTab like snippets behavior.
#   " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
#   "imap <expr><TAB>
#   " \ pumvisible() ? "\<C-n>" :
#   " \ neosnippet#expandable_or_jumpable() ?
#   " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#   smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#   \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

#   " For conceal markers.
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif

#   let g:neosnippet#enable_snipmate_compatibility = 1
#   let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
#   let g:neosnippet#scope_aliases = {}
#   let g:neosnippet#scope_aliases['jinja'] = 'html,twig'
# '''

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# on_event = 'VimEnter'
# hook_source = '''
#   let g:coc_filetype_map = {
#     \ 'mustache': 'html',
#     \ 'html.twig': 'html',
#     \ 'scss.css': 'css',
#     \ 'stylus': 'css',
#     \ }
# '''

# [[plugins]]
# repo = 'tpope/vim-speeddating'
# on_event = 'VimEnter'
# hook_source = '''
#   SpeedDatingFormat %m/%d%(%a) " 1/1(月)
# '''

# [[plugins]]
# repo = 'cohama/lexima.vim'
# on_event = 'InsertEnter'
# hook_source = '''
#   call lexima#add_rule({'char': '"', 'input_after': ''})
# '''

# [[plugins]]
# repo = 'lilydjwg/colorizer'
# on_ft = ['css', 'scss', 'html', 'jinja', 'vue', 'markdown']

# [[plugins]]
# repo = 'Shougo/ddc-ui-native'
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'Shougo/ddc-source-cmdline'
# on_event = 'InsertEnter'
# [[plugins]]
# repo = 'Shougo/ddc-source-cmdline-history'
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'tyru/eskk.vim'
# on_event = 'InsertEnter'
# on_map = {ic = '<Plug>'}
# hook_source = '''
# let g:eskk#directory = "~/.eskk"
# let g:eskk#dictionary = { 'path': "~/.skk-jisyo", 'sorted': 1, 'encoding': 'utf-8', }
# let g:eskk#large_dictionary = { 'path': "~/.skk/SKK-JISYO.utf8.L", 'sorted': 1, 'encoding': 'utf-8', }
# let g:eskk#enable_completion = 0
# " let g:eskk#no_default_mappings = 1
# let g:eskk#keep_state = 0
# let g:eskk#egg_like_newline = 1
# let g:eskk#server = {
# \   'host': '0.0.0.0',
# \   'port': 55000,
# \}
# '''

