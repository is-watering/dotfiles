[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  nnoremap <silent> ,m :OverCommandLine<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  call denite#custom#option('default', {
    \ 'direction': 'botright',
    \ 'split': 'horizontal',
    \ 'winheight': 8,
    \ 'winwidth': 20,
  \ })

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <ESC>
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  nnoremap <silent> <Leader>b :<C-u>Denite buffer<CR>
  nnoremap <silent> <Leader>r :<C-u>Denite register<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
depends = ['fzf.vim']
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent> <Leader>h :History<CR>
  tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons']
hook_add = '''
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  call defx#custom#option('_', {
    \ 'columns': 'indent:mark:icons:filename:type',
    \ 'direction': 'topleft',
    \ 'toggle': 1,
    \ 'show_ignored_files': 1,
    \ 'split': 'vertical',
    \ 'winwidth': 28,
  \ })

  call defx#custom#column('indent', {
    \ 'indent': '  ',
  \ })

  nnoremap <silent><C-e> :Defx -auto-cd -resume `expand('%:p:h')`<CR>

  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ? defx#do_action('open') :
    \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#is_directory() ? defx#do_action('open') :
    \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> E
    \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
    \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
    \ defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
    \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <ESC>
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
    \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
  let g:defx_icons_enable_syntax_highlight = 0
'''

# [[plugins]]
# repo = 'cocopon/vaffle.vim'
# hook_add = '''
#   nnoremap <silent><C-e> :Vaffle<CR>
#
#   let g:vaffle_auto_cd = 1
# '''

# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
#   nnoremap <silent><expr> <C-e> g:NERDTree.IsOpen() ? ":NERDTreeClose\<CR>" : ":NERDTreeFind\<CR>"
#   let g:NERDTreeWinSize = 28
#   " ファイルを開いたらNERDTreeを閉じる
#   let g:NERDTreeQuitOnOpen=1
#   " NERDTreeを同時に閉じる
#   autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
# '''

# [[plugins]]
# repo = 'severin-lemaignan/vim-minimap'

[[plugins]]
repo = 'skanehira/vsession'
hook_add = '''
  nnoremap <Leader>se :SaveSession
  nnoremap <Leader>lse :FloadSession<CR>
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=236
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=237
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive']
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \ 'left': [ [ 'mode', 'paste' ],
    \         [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
    \ 'right': [ [ 'lineinfo' ],
    \          [ 'percent' ],
    \          [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'LightLineFugitive'
    \ },
    \ 'separator': { 'left': "\ue0b8", 'right': "\ue0be" },
    \ 'subseparator': { 'left': "\ue0b9", 'right': "\ue0bf" }
  \ }

  function! LightLineFugitive()
    try
      if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let mark = "\ue725 "  " edit here for cool mark
        let _ = fugitive#head()
        return strlen(_) ? mark._ : ''
      endif
    catch
    endtry
    return ''
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

[[plugins]] # カラースキーマ
repo = 'vim-scripts/twilight256.vim'

