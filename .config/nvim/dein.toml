[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  let s:denite_win_width_percent = 0.8
  let s:denite_win_height_percent = 0.4

  call denite#custom#option('default', {
    "\ 'auto_action': 'preview',
    \ 'direction': 'botright',
    \ 'split': 'floating',
    \ 'filter_split_direction': 'floating',
    \ 'prompt': 'üêù',
    \ 'statusline': v:true,
    \ 'floating_preview': v:true,
    \ 'vertical_preview': v:true,
    \ 'preview_width': float2nr(&columns * s:denite_win_width_percent),
    \ 'preview_height': float2nr(&lines * s:denite_win_height_percent),
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'cached_filter': v:true,
    \ 'cursor_shape': v:true,
    \ 'cursor_wrap': v:true,
    \ 'start_filter': v:false,
    \ 'match_highlight': v:true,
    \ 'highlight_prompt': 'Search',
    \ 'highlight_filter_background': 'Search',
    \ 'highlight_matched_char': 'Search',
    \ 'highlight_matched_range': 'Search',
    \ 'highlight_window_background': 'NormalFloat',
  \ })

  autocmd FileType denite highlight Search ctermfg=226 ctermbg=232
  autocmd FileType denite highlight Pmenu ctermfg=199 ctermbg=85
  autocmd FileType denite highlight PmenuSel ctermfg=226 ctermbg=196

  "call denite#custom#source('file/old,file_mru,file/rec', 'converters',
  "  \ ['converter_relative_word'])
  "call denite#custom#source('file/old,file_mru', 'converters',
  "  \ ['converter/basename_to_top'])

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <ESC>
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite set winblend=0
  autocmd FileType denite-filter set winblend=0

  "nnoremap <leader>o :<C-u>Denite file/old<CR>
  "nnoremap <leader>f :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <Leader>b :<C-u>Denite buffer<CR>
  nnoremap <Leader>r :<C-u>Denite register<CR>
'''
depends = ['nabezokodaikon/denite-converter-basename_to_top']

[[plugins]]
repo = 'nabezokodaikon/denite-converter-basename_to_top'

# [[plugins]]
# repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <Leader>f :<C-u>ProjectFiles<CR>
  nnoremap <Leader>h :<C-u>History<CR>
  "nnoremap <Leader>b :<C-u>Buffers<CR>

  function! s:find_git_root()
    " „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÅßÈñã„Åè
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
  endfunction

  command! ProjectFiles execute 'Files' s:find_git_root()
  " command! -bang -nargs=? -complete=dir Files
  "     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
  command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', 'head -20 {}']}, <bang>0)

  " floating window
  "let $FZF_DEFAULT_OPTS='--layout=reverse'
  let g:fzf_layout = { 'window': 'call FloatingFZF()' }

  function! FloatingFZF()
    let buf = nvim_create_buf(v:false, v:true)
    call setbufvar(buf, '&signcolumn', 'no')

    let height = &lines - 10
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)

    let opts = {
      \ 'relative': 'editor',
      \ 'row': 4,
      \ 'col': col,
      \ 'width': width,
      \ 'height': height
      \ }

    call nvim_open_win(buf, v:true, opts)
  endfunction
'''
depends = ['junegunn/fzf']

# [[plugins]]
# repo = 'yuki-ycino/fzf-preview.vim'
# rev = 'release'
# hook_add = '''
#   let g:fzf_preview_default_fzf_options = {
#     "\ '--reverse': v:true,
#     \ '--preview-window': '',
#     \ }
#   let g:fzf_preview_use_dev_icons = 1
#   let g:fzf_preview_dev_icon_prefix_string_length = 10

#   nmap <Leader>f [fzf-p]
#   xmap <Leader>f [fzf-p]
#   nnoremap <Leader>f :<C-u>FzfPreviewProjectFiles<CR>
#   nnoremap <Leader>b :<C-u>FzfPreviewBuffers<CR>
#   nnoremap <Leader>m :<C-u>FzfPreviewProjectOldFiles<CR>
#   nnoremap <Leader>h :FzfPreviewOldFiles<CR>
#   nnoremap <Leader>r :FzfPreviewYankround<CR>
# '''

# [[plugins]]
# repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons']
hook_add = '''
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  call defx#custom#option('_', {
    \ 'columns': 'indent:mark:icons:filename:type',
    \ 'direction': 'topleft',
    \ 'toggle': 1,
    \ 'show_ignored_files': 1,
    \ 'split': 'vertical',
    \ 'winwidth': 28,
  \ })

  call defx#custom#column('indent', {
    \ 'indent': '  ',
  \ })

  nnoremap <silent><C-e> :Defx -auto-cd -resume `expand('%:p:h')`<CR>

  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ? defx#do_action('open') :
    \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#is_directory() ? defx#do_action('open') :
    \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> E
    \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
    \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
    \ defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
    \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <ESC>
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
    \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
  let g:defx_icons_enable_syntax_highlight = 0
'''

# [[plugins]]
# repo = 'ryanoasis/vim-devicons'
# hook_add = '''
#   let g:WebDevIconsUnicodeDecorateFolderNodes = 1
# '''

# [[plugins]]
# repo = 'cocopon/vaffle.vim'
# hook_add = '''
#   nnoremap <silent><C-e> :Vaffle<CR>
#
#   let g:vaffle_auto_cd = 1
# '''

# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
#   nnoremap <silent><expr> <C-e> g:NERDTree.IsOpen() ? ":NERDTreeClose\<CR>" : ":NERDTreeFind\<CR>"
#   let g:NERDTreeWinSize = 28 " „Éï„Ç°„Ç§„É´„ÇíÈñã„ÅÑ„Åü„ÇâNERDTree„ÇíÈñâ„Åò„Çã
#   let g:NERDTreeQuitOnOpen=1 " NERDTree„ÇíÂêåÊôÇ„Å´Èñâ„Åò„Çã
#   let g:NERDTreeShowHidden=1 " Èö†„Åó„Éï„Ç°„Ç§„É´„ÇíË°®Á§∫„Åô„Çã
#   autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
# '''

# [[plugins]]
# repo = 'severin-lemaignan/vim-minimap'

[[plugins]]
repo = 'skanehira/vsession'
hook_add = '''
  nnoremap <Leader>se :SaveSession
  nnoremap <Leader>lse :FloadSession<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'deus',
    \ 'active': {
    \ 'left': [
    \           [ 'mode', 'paste' ],
    \           [ 'gitbranch', 'readonly', 'filename', 'modified' ],
    \            [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
    \         ],
    \ 'right': [
    \            [ 'lineinfo' ],
    \            [ 'percent' ],
    \            [ 'fileformat', 'fileencoding', 'filetype' ],
    \          ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'GitBranch'
    \ },
    \ 'separator': { 'left': "\ue0b8", 'right': "\ue0be" },
    \ 'subseparator': { 'left': "\ue0b9", 'right': "\ue0bf" }
  \ }

  function! GitBranch()
    if exists("*gitbranch#name")
      let _ = gitbranch#name()
      return strlen(_) ? "\ue725 "._ : ''
    endif
    return ''
  endfunction

  let s:palette = g:lightline#colorscheme#deus#palette
  let s:term_red = 204
  let s:term_green = 124
  let s:term_yellow = 180
  let s:term_blue = 39
  let s:term_purple = 170
  let s:term_white = 145
  let s:term_black = 235
  let s:term_grey = 236
  
  let s:black = 236
  let s:white = 231
  let s:comment_grey = 252
  let s:gutter_grey = 239
  let s:cursor_grey = 236
  let s:visual_grey = 237

  let s:green = 78
  let s:darkgreen = 28
  let s:darkestgreen = 22
  let s:darkgreen = 28
  let s:darkestgreen = 22
  let s:darkestcyan = 23
  let s:mediumcyan = 117
  let s:darkestblue = 24
  let s:darkblue = 31
  let s:purple = 165
  let s:darkpurple = 91
  let s:red = 160
  let s:darkred = 124
  
  let s:palette.normal.left  = [ [ 23, 231, s:comment_grey, s:darkgreen, 'bold' ], [ 231, 31, s:green, s:black ] ]
  let s:palette.normal.middle  = [ [ 117, 24, s:green, s:black ] ]
  let s:palette.normal.right = [ [ 23, 117, s:comment_grey, s:darkgreen ], [ 117, 31, s:comment_grey, s:gutter_grey ], [ 117, 24, s:green, s:black ] ]

  let s:palette.insert.left  = [ [ 23, 231, s:darkestcyan, s:mediumcyan, 'bold' ], [ 231, 31, s:mediumcyan, s:darkestblue ] ]
  let s:palette.insert.middle  = [ [ 117, 24, s:mediumcyan, s:darkestblue ] ]
  let s:palette.insert.right = [ [ 23, 117, s:darkestcyan, s:mediumcyan ], [ 117, 31, s:mediumcyan, s:darkblue ], [ 117, 24, s:mediumcyan, s:darkestblue ] ]
  
  let s:palette.visual.left  = [ [ 23, 231, s:comment_grey, s:darkpurple, 'bold' ], [ 231, 31, s:purple, s:black ] ]
  let s:palette.visual.middle  = [ [ 117, 24, s:purple, s:black ] ]
  let s:palette.visual.right = [ [ 23, 117, s:comment_grey, s:darkpurple ], [ 117, 31, s:comment_grey, s:gutter_grey ], [ 117, 24, s:purple, s:black ] ]
  
  let s:palette.replace.left  = [ [ 23, 231, s:comment_grey, s:darkred, 'bold' ], [ 231, 31, s:red, s:black ] ]
  let s:palette.replace.middle  = [ [ 117, 24, s:red, s:black ] ]
  let s:palette.replace.right = [ [ 23, 117, s:comment_grey, s:darkred ], [ 117, 31, s:comment_grey, s:gutter_grey ], [ 117, 24, s:red, s:black ] ]
'''

# [[plugins]]
# repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'sgur/vim-editorconfig'

# [[plugins]]
# repo = 'tmhedberg/matchit'

# [[plugins]]
# repo = 'andymass/vim-matchup'
# # on_event = 'InsertEnter'
# hook_add = '''
#   let g:matchup_matchparen_enabled = 0
# '''

[[plugins]]
repo = 'tpope/vim-sleuth'

# [[plugins]]
# repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet.vim', 'context_filetype.vim']
hook_source = '''
  let g:deoplete#enable_at_startup = 1

  call deoplete#custom#option({
    \ 'auto_complete_delay': 0,
    \ 'min_pattern_length': 2,
  \})

  call deoplete#custom#option('omni_patterns', {
    \ 'java': '[^. *\t]\.\w*',
    \ 'html': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    \ 'xhtml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    \ 'xml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
  \})

  call deoplete#custom#var('omni', 'functions', {
  \ 'css,stylus': ['csscomplete#CompleteCSS']
  \})
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
hook_source = '''
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target) [ xmap <C-k> <Plug>Ôºàneosnippet_expand_targetÔºâ] 

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
  let g:neosnippet#scope_aliases = {}
  let g:neosnippet#scope_aliases['jinja'] = 'html,twig'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
  if !exists('g:context_filetype#same_filetypes')
    let g:context_filetype#filetypes = {}
  endif
  let g:context_filetype#filetypes = {
    \ 'html': [
    \   {
    \     'filetype': 'css',
    \     'start': '<style\%( [^>]*\)\?>',
    \     'end': '</style>',
    \   },
    \   {
    \     'filetype': 'css',
    \     'start': '<[^>]\+ style=\([''"]\)',
    \     'end': '\1',
    \   },
    \ ],
    \ 'toml': [
    \   {
    \     'filetype': 'vim',
    \     'start': '^\s*hook_\(add\|source\|post_source\)\s*=\s*'."'"."''",
    \     'end': "'"."''"
    \   },
    \ ],
  \}
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]] # „Ç´„É©„Éº„Çπ„Ç≠„Éº„Éû
repo = 'vim-scripts/twilight256.vim'
